<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.db.sys.dao.SysRoleDao">

    <select id="findObjects"
            resultType="com.db.common.vo.CheckBox">
            select id,name
            from sys_roles       
    </select>
    <!-- 查询角色以及角色对应的菜单id -->
    <resultMap type="com.db.sys.vo.SysRoleMenuResult" 
               id="sysRoleMenuVo">
          <!-- 当需要基于此id执行其它查询时，
                              此id需要单独处理映射 -->
          <id  property="id" column="id"/>
          <!-- 基于角色id再去查询菜单id -->
          <collection property="menuIds"
               column="id"
               select="com.db.sys.dao.SysRoleMenuDao.findMenuIdsByRoleId">
          </collection>   
    </resultMap>
    
    <select id="findObjectById"
            resultMap="sysRoleMenuVo">
       select id,name,note
       from sys_roles
       where id=#{id}
    </select>
    
    <update id="updateObject">
        update sys_roles
        set
        name=#{name},
        note=#{note},
        modifiedUser=#{modifiedUser},
        modifiedTime=#{modifiedTime}
        where id=#{id}
    </update>
    
    <!-- 
    1)useGeneratedKeys 表示使用自增长主键值
    2)keyProperty 表示将insert操作后的主键值
        赋值给参数的id属性
     -->
  
    <insert id="insertObject"
            parameterType="com.db.sys.entity.SysRole"
            useGeneratedKeys="true"
            keyProperty="id">
         insert into sys_roles 
         (id,name,note,createdTime,modifiedTime,
         createdUser,modifiedUser) 
         values
         (null,#{name},#{note},now(),now(),
         #{createdUser},#{modifiedUser})
    </insert>
  
    <!--  
    <insert id="insertObject"
            parameterType="com.db.sys.entity.SysRole">
         <selectKey resultType="int" 
                    order="AFTER"
                    keyProperty="id">
             select last_insert_id()
         </selectKey>
         insert into sys_roles 
         (name,note,createdTime,modifiedTime,
         createdUser,modifiedUser) 
         values
         (#{name},#{note},now(),now(),
         #{createdUser},#{modifiedUser})
    </insert>
    -->

    <!-- 删除角色自身信息 -->
    <delete id="deleteObject">
        delete from sys_roles
        where id=#{id}
    </delete>

    <!-- 通过sql元素定义sql语句中的共性 -->
    <sql id="queryWhereId">
        <where><!-- mybatis 中的动态sql -->
             <!--if语句中的username来自于dao方法中使用@Param注解定义的参数-->
            <if test="name!=null and name!=''">
                name like concat("%",#{name},"%")
            </if>
        </where>
    </sql>
    <!-- 依据条件查询总记录数 -->
    <select id="getRowCount" resultType="int">
          select count(*)
          from sys_roles
          <include refid="queryWhereId"/>
          <!-- 其中concat函数用于实现字符串连接 -->
    </select>
    <select id="findPageObjects"
            resultType="com.db.sys.entity.SysRole">
          select *
          from sys_roles
          <include refid="queryWhereId"/>
          order by createdTime desc
          limit #{startIndex},#{pageSize}
          <!--limit 子句为分页查询子句 ，第一个参数代码起始位置-->
    </select>
    
</mapper>



